// SCSS Mixins and Utility Functions
// Reusable mixins for common UI patterns and functionality

// Import dependencies
@import "./colors";
@import "./spacing";
@import "./typography";
@import "./breakpoints";

// ===== BUTTON MIXINS =====
// Consistent button styling across the application

@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: var(--radius-md);
  font-family: $font-family-primary;
  font-weight: $font-weight-medium;
  text-decoration: none;
  text-align: center;
  white-space: nowrap;
  cursor: pointer;
  transition: var(--transition-fast);

  &:focus {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin button-size($size: "md") {
  @if $size == "sm" {
    padding: $button-padding-y-sm $button-padding-x-sm;
    font-size: $font-size-sm;
    min-height: 2rem;
  } @else if $size == "md" {
    padding: $button-padding-y-md $button-padding-x-md;
    font-size: $font-size-base;
    min-height: 2.5rem;
  } @else if $size == "lg" {
    padding: $button-padding-y-lg $button-padding-x-lg;
    font-size: $font-size-lg;
    min-height: 3rem;
  }
}

@mixin button-variant($variant: "primary") {
  @if $variant == "primary" {
    background-color: var(--color-primary);
    color: var(--color-text-inverse);

    &:hover:not(:disabled) {
      background-color: var(--color-primary-hover);
    }

    &:active:not(:disabled) {
      background-color: var(--color-primary-active);
    }
  } @else if $variant == "secondary" {
    background-color: var(--color-surface);
    color: var(--color-text-primary);
    border: 1px solid var(--color-border);

    &:hover:not(:disabled) {
      background-color: var(--color-surface-hover);
    }
  } @else if $variant == "outline" {
    background-color: transparent;
    color: var(--color-primary);
    border: 1px solid var(--color-primary);

    &:hover:not(:disabled) {
      background-color: var(--color-primary);
      color: var(--color-text-inverse);
    }
  } @else if $variant == "ghost" {
    background-color: transparent;
    color: var(--color-text-primary);

    &:hover:not(:disabled) {
      background-color: var(--color-surface-hover);
    }
  }
}

// ===== FORM MIXINS =====
@mixin input-base {
  display: block;
  width: 100%;
  padding: $input-padding-y $input-padding-x;
  border: 1px solid var(--color-border);
  border-radius: var(--radius-md);
  background-color: var(--color-background);
  color: var(--color-text-primary);
  font-family: $font-family-primary;
  font-size: $font-size-base;
  line-height: $line-height-normal;
  transition: var(--transition-fast);

  &::placeholder {
    color: var(--color-text-muted);
  }

  &:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    background-color: var(--color-surface);
  }
}

@mixin label-base {
  display: block;
  margin-bottom: $space-2;
  font-weight: $font-weight-medium;
  color: var(--color-text-primary);
  font-size: $font-size-sm;
}

// ===== CARD MIXINS =====
@mixin card-base {
  background-color: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-sm);
  transition: var(--transition-fast);
}

@mixin card-hover {
  &:hover {
    box-shadow: var(--shadow-md);
    transform: translateY(-1px);
  }
}

@mixin card-padding($size: "md") {
  @if $size == "sm" {
    padding: $card-padding-sm;
  } @else if $size == "md" {
    padding: $card-padding-md;
  } @else if $size == "lg" {
    padding: $card-padding-lg;
  }
}

// ===== UTILITY MIXINS =====

// Visually hidden but accessible to screen readers
@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Reset button styles
@mixin button-reset {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  cursor: pointer;
}

// Reset list styles
@mixin list-reset {
  list-style: none;
  padding: 0;
  margin: 0;
}

// Truncate text with ellipsis
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Multi-line text truncation
@mixin text-truncate-lines($lines) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Clearfix for float layouts
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

// Center content absolutely
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Full width/height
@mixin full-size {
  width: 100%;
  height: 100%;
}

// ===== ANIMATION MIXINS =====
@mixin fade-in($duration: 0.3s) {
  animation: fadeIn $duration ease-in-out;
}

@mixin slide-up($duration: 0.3s) {
  animation: slideUp $duration ease-out;
}

@mixin scale-in($duration: 0.2s) {
  animation: scaleIn $duration ease-out;
}

// Keyframe animations
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(1rem);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

// ===== THEME MIXINS =====
@mixin theme-transition {
  transition:
    background-color var(--transition-normal),
    color var(--transition-normal),
    border-color var(--transition-normal);
}

// Dark mode utilities
@mixin dark-mode {
  @media (prefers-color-scheme: dark) {
    @content;
  }

  [data-theme="dark"] & {
    @content;
  }
}

@mixin light-mode {
  @media (prefers-color-scheme: light) {
    @content;
  }

  [data-theme="light"] & {
    @content;
  }
}

// ===== FOCUS MIXINS =====
@mixin focus-visible {
  &:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }
}

@mixin focus-ring($color: var(--color-primary)) {
  &:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
}
